<link rel="stylesheet" href="https://cdn.shopify.com/shopifycloud/model-viewer-ui/assets/v1.0/model-viewer-ui.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css">
<script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js" defer></script>

{% assign selected_variant = product.selected_or_first_available_variant %}

<script src="{{ 'product-model.js' | asset_url }}" defer></script>
<script src="{{ 'product-image.js' | asset_url }}" defer></script>

<style>
  .swiper-button-prev,
  .swiper-button-next {
    color: black;
    top: auto !important;
    height: 20px;
  }
  .swiper-button-prev::after,
  .swiper-button-next::after {
    font-size: 20px;
  }

  .swiper-pagination {
    color: black;
    button: 0 !important;
  }

  .swiper-pagination-bullet-active {
    background-color: black !important;
  }

  .product--information {
    height: fit-content;
  }

  .variant-pills-container {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .variant-pill {
    border: 1px solid #ccc;
    padding: 0.5rem 1rem;
    border-radius: 999px; /* Creates the pill shape */
    background-color: #f0f0f0;
    cursor: pointer;
    font-size: 0.9rem;
  }

  .variant-pill--active {
    border-color: #000; /* Or your active color */
    background-color: #eee; /* Or your active background */
    font-weight: bold;
  }
</style>

<div x-data="{productModalOpen: false, currentMediaType: null}">
  <div class="max-w-6xl mx-auto mb-14 mt-24">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
      <div class="product--medias">
        <div class="hidden md:block">
          {% for media in product.media %}
            <div class="h-94 overflow-hidden p-2">
              {% render 'product-media', media: media %}
            </div>
          {% endfor %}
        </div>

        {% comment %} FOR MOBILE DEVICES {% endcomment %}
        <div class="md:hidden">
          <div class="swiper">
            <div class="swiper-wrapper">
              {% for media in product.media %}
                <div class="swiper-slide">
                  <div class="aspect-square overflow-hidden p-2">
                    <div class="w-full h-full flex items-center justify-center bg-gray-50">
                      {% render 'product-media', media: media %}
                    </div>
                  </div>
                </div>
              {% endfor %}
            </div>

            {% if product.media.size > 1 %}
              <div class="swiper-thumbnails flex gap-2 justify-center mt-4 px-2">
                {% for media in product.media %}
                  <div
                    class="swiper-thumbnail w-20 h-20 cursor-pointer border-2 border-transparent hover:border-gray-300 transition-colors {% if forloop.first %}border-gray-900{% endif %}"
                    data-index="{{ forloop.index0 }}"
                  >
                    {% if media.media_type == 'image' %}
                      <img
                        src="{{ media | img_url: '200x200', crop: 'center' }}"
                        width="200"
                        height="200"
                        alt="{{ media.alt }}"
                        class="w-full h-full object-cover"
                      >
                    {% else %}
                      <div class="w-full h-full bg-gray-100 flex items-center justify-center">
                        {% if media.media_type == 'video' %}
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-8 w-8 text-gray-400"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                          </svg>
                        {% else %}
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-8 w-8 text-gray-400"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                          </svg>
                        {% endif %}
                      </div>
                    {% endif %}
                  </div>
                {% endfor %}
              </div>
            {% endif %}

            {% if product.media.size > 1 %}
              <div class="swiper-button-prev"></div>
              <div class="swiper-button-next"></div>
            {% endif %}
          </div>
        </div>
      </div>

      <div class="product--information sticky top-5 p-2">
        {% form 'product', product, id: 'product-form', novalidate: 'novalidate' %}
          <input type="hidden" name="id" value="{{ selected_variant.id }}">
          {% for block in section.blocks %}
            {% case block.type %}
              {% when 'vendor' %}
                <div class="my-3">
                  <span class="text-xs text-gray-500">{{ product.vendor }}</span>
                </div>
              {% when 'title' %}
                <div class="my-3">
                  <h1 class="text-3xl text-gray-900">{{ product.title }}</h1>
                </div>
              {% when 'price' %}
                <div class="my-3" id="price-{{ section.id }}">
                  <span class="text-base text-gray-500  line-through">
                    {{ selected_variant.compare_at_price | money }}
                  </span>
                  <span class="text-lg text-gray-900">{{ selected_variant.price | money }}</span>

                  {% if selected_variant.price < selected_variant.compare_at_price %}
                    <span class="px-5 py-1 text-sm font-bold bg-red-500 rounded-full text-white mx-4">Sale</span>
                  {% endif %}
                </div>
              {% when 'variant_selector' %}
                <div class="my-3">
                  {% unless product.has_only_default_variant %}
                    <variant-selector data-url="{{ product.url }}" data-section="{{ section.id }}">
                      {% for option in product.options_with_values %}
                        <label>{{ option.name }}</label>
                        <div class="variant-pills-container my-2">
                          {% for value in option.values %}
                            <button
                              type="button"
                              class="variant-pill {% if option.selected_value == value %} variant-pill--active {% endif %}"
                              data-option-name="{{ option.name | escape }}"
                              data-option-value="{{ value | escape }}"
                            >
                              {{ value }}
                            </button>
                          {% endfor %}
                        </div>
                      {% endfor %}
                      <script type="application/json">
                        {{ product.variants | json }}
                      </script>
                    </variant-selector>
                  {% endunless %}
                </div>
              {% when 'quantity' %}
                <div class="my-3">
                  <label for="Quantity-{{ section.id }}">Quantity</label>

                  <div class="my-2">
                    <input
                      class="w-full border px-3 py-3"
                      type="number"
                      name="quantity"
                      id="Quantity-{{ section.id }}"
                      value="1"
                      min="1"
                    >
                  </div>
                </div>
              {% when 'description' %}
                <div class="my-3">
                  <p class="text-gray-700">{{ product.description }}</p>
                </div>
              {% when 'checkout_button' %}
                <div class="my-3">
                  <button
                    type="submit"
                    name="add"
                    class="w-full px-6 py-4 bg-gray-900 text-white hover:bg-gray-700 rounded-sm my-2"
                    {% if selected_variant.available == false %}
                      disabled
                    {% endif %}
                  >
                    {% if selected_variant.available == false %}
                      Sold out
                    {% else %}
                      Add to cart
                    {% endif %}
                  </button>
                </div>
              {% else %}

            {% endcase %}
          {% endfor %}
        {% endform %}
      </div>
    </div>
  </div>

  {% comment %} Modal display {% endcomment %}
  <style>
    .media model-viewer,
    .media > * {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  </style>

  <div id="productModelModal">
    <div x-show="productModalOpen" class="w-full h-full z-50 items-center fixed inset-0">
      <div class="relative w-full h-full bg-white">
        <div class="relative">
          <div class="flex justify-between items-start p-5 border-b">
            <h2
              class="text-xl font-bold text-gray-700"
              x-text="currentMediaType === 'model' ? '3D Model Preview' : 'Image Preview'"
            ></h2>
            <button
              x-on:click="productModalOpen = false"
              class="text-gray-400 bg-transparent hover:text-gray-700 rounded text-sm p-2 ml-auto inline-flex items-center"
            >
              {% render 'icon-close' %}
            </button>
          </div>

          <div id="body" class="media block relative" style="padding-top: min(calc(100vh - 5rem), 100%);"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  class VariantSelector extends HTMLElement {
    constructor() {
      super();
      this.addEventListener('click', this.onPillClick);
      this.variantData = JSON.parse(this.querySelector('[type="application/json"]').textContent);
      this.updatePillsOnLoad(); // Initialize active pills
    }

    updatePillsOnLoad() {
      const urlParams = new URLSearchParams(window.location.search);
      const variantIdFromURL = urlParams.get('variant');

      if (variantIdFromURL) {
        const initialVariant = this.variantData.find((variant) => variant.id.toString() === variantIdFromURL);
        if (initialVariant) {
          initialVariant.options.forEach((optionValue, index) => {
            const optionName = this.getProductOptions()[index];
            this.setActivePill(optionName, optionValue);
          });
          this.currentVariant = initialVariant;
          this.updateFormID();
          this.updatePrice();
        }
      } else {
        // Set initial active pills based on the first variant's options
        if (this.variantData.length > 0) {
          this.variantData[0].options.forEach((optionValue, index) => {
            const optionName = this.getProductOptions()[index];
            this.setActivePill(optionName, optionValue);
          });
          this.currentVariant = this.variantData[0];
          this.updateFormID();
          this.updatePrice();
        }
      }
      this.getSelectedOptionsFromPills(); // Initial selection
      this.getSelectedVariant();
    }

    getProductOptions() {
      // Extract option names from the product data
      if (this.variantData.length > 0 && this.variantData[0].options) {
        const firstVariant = this.variantData[0];
        const numOptions = firstVariant.options.length;
        const optionNames = [];
        const firstProductOptionKeys = Object.keys(
          JSON.parse(this.querySelector('[type="application/json"]').textContent)[0]
        );
        for (let i = 1; i <= numOptions; i++) {
          const optionKey = firstProductOptionKeys.find(
            (key) => key.startsWith('option') && key.endsWith(i.toString())
          );
          if (optionKey) {
            // Need a way to reliably get the actual option names ("Size", "Color", etc.)
            // This might require accessing the `product.options` data from Liquid
            const optionIndex = i - 1;
            const optionNameFromLabel = this.querySelectorAll('label')[optionIndex]?.textContent.trim();
            if (optionNameFromLabel) {
              optionNames.push(optionNameFromLabel);
            } else {
              // Fallback if label not found (less ideal)
              optionNames.push(`Option ${i}`);
            }
          }
        }
        return optionNames;
      }
      return [];
    }

    onPillClick(event) {
      const target = event.target.closest('.variant-pill');
      if (!target) return;

      const optionName = target.dataset.optionName;
      const optionValue = target.dataset.optionValue;

      this.setActivePill(optionName, optionValue);
      this.getSelectedOptionsFromPills();
      this.getSelectedVariant();

      if (this.currentVariant) {
        this.updateURL();
        this.updateFormID();
        this.updatePrice();
      }
    }

    setActivePill(optionName, optionValue) {
      const pillsContainer = Array.from(this.querySelectorAll('.variant-pills-container')).find((container) => {
        const firstPill = container.querySelector('.variant-pill');
        return firstPill?.dataset.optionName === optionName;
      });

      if (pillsContainer) {
        pillsContainer.querySelectorAll('.variant-pill').forEach((pill) => {
          pill.classList.remove('variant-pill--active');
        });
        const activePill = Array.from(pillsContainer.querySelectorAll('.variant-pill')).find((pill) => {
          return pill.dataset.optionValue === optionValue && pill.dataset.optionName === optionName;
        });
        activePill?.classList.add('variant-pill--active');
      }
    }

    getSelectedOptionsFromPills() {
      this.options = Array.from(this.querySelectorAll('.variant-pills-container'), (container) => {
        const activePill = container.querySelector('.variant-pill--active');
        return activePill ? activePill.dataset.optionValue : null;
      }).filter(Boolean); // Filter out nulls if no pill is active for an option
    }

    getVariantJSON() {
      this.variantData = this.variantData || JSON.parse(this.querySelector('[type="application/json"]').textContent);
      return this.variantData;
    }

    getSelectedVariant() {
      this.currentVariant = this.getVariantJSON().find((variant) => {
        const variantOptionMatch = variant.options.every((variantOption, index) => {
          // Need to correctly map the selected pill values to the variant options
          const optionNameFromVariant = this.getProductOptions()[index];
          const selectedPillForOption = Array.from(this.querySelectorAll('.variant-pills-container'))
            .find((container) => {
              const firstPill = container.querySelector('.variant-pill');
              return firstPill?.dataset.optionName === optionNameFromVariant;
            })
            ?.querySelector('.variant-pill--active')?.dataset.optionValue;

          return selectedPillForOption === variantOption;
        });
        return variantOptionMatch;
      });
      console.log('Selected Variant:', this.currentVariant);
    }

    updateURL() {
      if (!this.currentVariant) return;
      window.history.replaceState({}, '', `${this.dataset.url}?variant=${this.currentVariant.id}`);
    }

    updateFormID() {
      const form_input = document.querySelector('#product-form')?.querySelector('input[name="id"]');
      if (form_input) {
        form_input.value = this.currentVariant.id;
      }
    }

    updatePrice() {
      fetch(`${this.dataset.url}?variant=${this.currentVariant.id}&section_id=${this.dataset.section}`)
        .then((response) => response.text())
        .then((responseText) => {
          const id = `price-${this.dataset.section}`;
          const html = new DOMParser().parseFromString(responseText, 'text/html');
          const oldPrice = document.getElementById(id);
          const newPrice = html.getElementById(id);
          if (oldPrice && newPrice) {
            oldPrice.innerHTML = newPrice.innerHTML;
          }
        });
    }
  }

  customElements.define('variant-selector', VariantSelector);
</script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const swiper = new Swiper('.swiper', {
      direction: 'horizontal',
      {% if product.media.size > 1 %}
      navigation: {
        prevEl: '.swiper-button-prev',
        nextEl: '.swiper-button-next',
      },
      {% endif %}
    });

    {% if product.media.size > 1 %}
    // Handle thumbnail clicks
    document.querySelectorAll('.swiper-thumbnail').forEach((thumb, index) => {
      thumb.addEventListener('click', () => {
        swiper.slideTo(index);
        // Update active thumbnail
        document.querySelectorAll('.swiper-thumbnail').forEach((t) => {
          t.classList.remove('border-gray-900');
          t.classList.add('border-transparent');
        });
        thumb.classList.remove('border-transparent');
        thumb.classList.add('border-gray-900');
      });
    });

    // Update active thumbnail on slide change
    swiper.on('slideChange', () => {
      document.querySelectorAll('.swiper-thumbnail').forEach((thumb, index) => {
        thumb.classList.remove('border-gray-900');
        thumb.classList.add('border-transparent');
        if (index === swiper.activeIndex) {
          thumb.classList.remove('border-transparent');
          thumb.classList.add('border-gray-900');
        }
      });
    });
    {% endif %}
  });
</script>

{% schema %}
{
  "name": "Product",
  "blocks": [
    {
      "type": "vendor",
      "name": "Vendor",
      "limit": 1
    },
    {
      "type": "title",
      "name": "Title",
      "limit": 1
    },
    {
      "type": "price",
      "name": "Price",
      "limit": 1
    },
    {
      "type": "variant_selector",
      "name": "Variant Selector",
      "limit": 1
    },
    {
      "type": "quantity",
      "name": "Quantity",
      "limit": 1
    },
    {
      "type": "description",
      "name": "Description",
      "limit": 1
    },
    {
      "type": "checkout_button",
      "name": "Checkout Button",
      "limit": 1
    }
  ]
}
{% endschema %}
