<div class="related">
  <div class="width">
    <h2 class="text-6xl uppercase text-center mb-5">{{ section.settings.heading }}</h2>

    <div class="related-products pt-2 flex flex-nowrap gap-x-7 overflow-x-scroll snap-x snap-mandatory pb-6 px-5"></div>
  </div>
</div>

{% if cart.item_count > 0 %}
  {% assign related_id = cart.items[0].product_id %}
{% else %}
  {% assign related_id = 14683683586413 %}
{% endif %}

<script>
  function formatMoney(cents, format) {
    if (typeof cents == 'string') {
      cents = cents.replace('.', '');
    }
    var value = '';
    var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    var formatString = format || this.money_format;

    function defaultOption(opt, def) {
      return typeof opt == 'undefined' ? def : opt;
    }

    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = defaultOption(precision, 2);
      thousands = defaultOption(thousands, ',');
      decimal = defaultOption(decimal, '.');

      if (isNaN(number) || number == null) {
        return 0;
      }

      number = (number / 100.0).toFixed(precision);

      var parts = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents = parts[1] ? decimal + parts[1] : '';

      return dollars + cents;
    }

    switch (formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 2, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }

    return formatString.replace(placeholderRegex, value);
  }

  function buildBlock(product) {
    const formattedPrice = formatMoney(product.price, '{{ shop.money_format }}');

    const html = `
      <div class="w-[300px] flex-shrink-0 snap-center shadow-sm rounded-lg overflow-hidden">
        <a class="related-product block" href="${product.url}">
          <div class="aspect-square mb-4">
            <img class="w-full h-full block object-cover" src="${product.images[0]}" />
          </div>
          <h3 class="text-lg font-medium mb-2">${product.title}</h3>
          <span class="block mb-4">${formattedPrice}</span>
          <form method="post" action="/cart/add">
            <input name="id" type="hidden" value="${product.variants[0].id}" />
            <button type="submit" class="w-full bg-black text-white py-2 px-4 hover:bg-gray-800 transition-colors">Add to cart</button>
          </form>
        </a>
      </div>
    `;

    return html;
  }

  fetch(window.Shopify.routes.root + 'recommendations/products.json?product_id={{ related_id }}')
    .then((response) => response.json())
    .then(({ products }) => {
      products.forEach((product) => {
        const html = buildBlock(product);
        document.querySelector('.related-products').innerHTML += html;
      });
    });
</script>

{% schema %}
{
  "name": "Related products",
  "settings": [
    {
      "type": "text",
      "label": "Heading",
      "id": "heading",
      "default": "You may also like"
    }
  ],
  "presets": [
    {
      "name": "Related products"
    }
  ]
}
{% endschema %}
